from graphviz import Digraph

def create_diagram(name, format='png'):
    return Digraph(name=name, format=format)

# 1. Property Booking Flowchart
booking_flow = create_diagram('Property Booking Flowchart')
booking_flow.node('A', 'Start')
booking_flow.node('B', 'Select Property')
booking_flow.node('C', 'Check Availability')
booking_flow.node('D', 'Property Available?', shape='diamond')
booking_flow.node('E', 'Make Payment')
booking_flow.node('F', 'Confirm Booking')
booking_flow.node('G', 'End')
booking_flow.edge('A', 'B')
booking_flow.edge('B', 'C')
booking_flow.edge('C', 'D')
booking_flow.edge('D', 'E', label='Yes')
booking_flow.edge('D', 'G', label='No')
booking_flow.edge('E', 'F')
booking_flow.edge('F', 'G')
booking_flow.render(filename='property-booking-flowchart', format='png', cleanup=True)

# 2. Data Flow Diagram
data_flow = create_diagram('Data Flow Diagram')
data_flow.node('U', 'User', shape='ellipse')
data_flow.node('P', 'Properties', shape='box')
data_flow.node('B', 'Bookings', shape='box')
data_flow.node('Pay', 'Payments', shape='box')
data_flow.node('Reg', 'Register User', shape='circle')
data_flow.node('List', 'List Property', shape='circle')
data_flow.node('Book', 'Book Property', shape='circle')
data_flow.node('Proc', 'Process Payment', shape='circle')
data_flow.edge('U', 'Reg', label='Register')
data_flow.edge('Reg', 'U', label='User Data')
data_flow.edge('U', 'List', label='List Property')
data_flow.edge('List', 'P', label='Property Data')
data_flow.edge('U', 'Book', label='Book Property')
data_flow.edge('Book', 'B', label='Booking Data')
data_flow.edge('B', 'Proc', label='Payment Info')
data_flow.edge('Proc', 'Pay', label='Payment Data')
data_flow.render(filename='data-flow', format='png', cleanup=True)

# 3. Use Case Diagram
use_case = create_diagram('Use Case Diagram')
use_case.node('Host', 'Host', shape='ellipse')
use_case.node('Guest', 'Guest', shape='ellipse')
use_case.node('Reg', 'Register Account', shape='ellipse')
use_case.node('Login', 'Login', shape='ellipse')
use_case.node('ListProp', 'List Property', shape='ellipse')
use_case.node('BookProp', 'Book Property', shape='ellipse')
use_case.node('Pay', 'Make Payment', shape='ellipse')
use_case.node('Review', 'Leave Review', shape='ellipse')
use_case.edge('Host', 'Reg')
use_case.edge('Host', 'Login')
use_case.edge('Host', 'ListProp')
use_case.edge('Guest', 'Reg')
use_case.edge('Guest', 'Login')
use_case.edge('Guest', 'BookProp')
use_case.edge('Guest', 'Pay')
use_case.edge('Guest', 'Review')
use_case.render(filename='use-case-diagram', format='png', cleanup=True)

# 4. Features and Functionalities Diagram
features = create_diagram('Features and Functionalities')
features.node('Backend', 'Backend Features', shape='box')
features.node('Auth', 'User Authentication', shape='ellipse')
features.node('PropMgmt', 'Property Management', shape='ellipse')
features.node('Booking', 'Booking System', shape='ellipse')
features.node('Payments', 'Payments', shape='ellipse')
features.node('Reviews', 'Reviews', shape='ellipse')
features.edge('Backend', 'Auth')
features.edge('Backend', 'PropMgmt')
features.edge('Backend', 'Booking')
features.edge('Backend', 'Payments')
features.edge('Backend', 'Reviews')
features.render(filename='features-and-functionalities', format='png', cleanup=True)

print("âœ… All diagrams generated successfully!")
